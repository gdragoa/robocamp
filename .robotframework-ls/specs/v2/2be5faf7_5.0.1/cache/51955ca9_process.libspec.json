mtime:1665499731.9345515
{"name": "Process", "doc": "Robot Framework library for running processes.\n\n\nThis library utilizes Python's [subprocess](http://docs.python.org/library/subprocess.html) module and its [Popen](http://docs.python.org/library/subprocess.html\\#popen-constructor) class.\n\n\nThe library has following main usages:\n\n\n- Running processes in system and waiting for their completion using `Run Process` keyword.\n- Starting processes on background using `Start Process`.\n- Waiting started process to complete using `Wait For Process` or stopping them with `Terminate Process` or `Terminate All Processes`.\n\n\n### Table of contents\n\n- `Specifying command and arguments`\n- `Process configuration`\n- `Active process`\n- `Result object`\n- `Boolean arguments`\n- `Example`\n- `Keywords`\n\n\n## Specifying command and arguments\n\nBoth `Run Process` and `Start Process` accept the command to execute and all arguments passed to the command as separate arguments. This makes usage convenient and also allows these keywords to automatically escape possible spaces and other special characters in commands and arguments. Notice that if a command accepts options that themselves accept values, these options and their values must be given as separate arguments.\n\n\nWhen `running processes in shell`, it is also possible to give the whole command to execute as a single string. The command can then contain multiple commands to be run together. When using this approach, the caller is responsible on escaping.\n\n\nExamples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| `Run Process` | ${tools}${/}prog.py | argument | second arg with spaces |  |  |\n| `Run Process` | java | -jar | ${jars}${/}example.jar | --option | value |\n| `Run Process` | prog.py \"one arg\" && tool.sh | shell=yes | cwd=${tools} |  |  |\n\n\nPossible non-string arguments are converted to strings automatically.\n\n\n## Process configuration\n\n`Run Process` and `Start Process` keywords can be configured using optional `**configuration` keyword arguments. Configuration arguments must be given after other arguments passed to these keywords and must use syntax like `name=value`. Available configuration arguments are listed below and discussed further in sections afterwards.\n\n\n| Name | Explanation |\n| :--- | :--- |\n| shell | Specifies whether to run the command in shell or not. |\n| cwd | Specifies the working directory. |\n| env | Specifies environment variables given to the process. |\n| env:\\<name> | Overrides the named environment variable(s) only. |\n| stdout | Path of a file where to write standard output. |\n| stderr | Path of a file where to write standard error. |\n| stdin | Configure process standard input. New in RF 4.1.2. |\n| output_encoding | Encoding to use when reading command outputs. |\n| alias | Alias given to the process. |\n\n\nNote that because `**configuration` is passed using `name=value` syntax, possible equal signs in other arguments passed to `Run Process` and `Start Process` must be escaped with a backslash like `name\\=value`. See `Run Process` for an example.\n\n\n### Running processes in shell\n\nThe `shell` argument specifies whether to run the process in a shell or not. By default shell is not used, which means that shell specific commands, like `copy` and `dir` on Windows, are not available. You can, however, run shell scripts and batch files without using a shell.\n\n\nGiving the `shell` argument any non-false value, such as `shell=True`, changes the program to be executed in a shell. It allows using the shell capabilities, but can also make the process invocation operating system dependent. Having a shell between the actually started process and this library can also interfere communication with the process such as stopping it and reading its outputs. Because of these problems, it is recommended to use the shell only when absolutely necessary.\n\n\nWhen using a shell it is possible to give the whole command to execute as a single string. See `Specifying command and arguments` section for examples and more details in general.\n\n\n### Current working directory\n\nBy default, the child process will be executed in the same directory as the parent process, the process running Robot Framework, is executed. This can be changed by giving an alternative location using the `cwd` argument. Forward slashes in the given path are automatically converted to backslashes on Windows.\n\n\n`Standard output and error streams`, when redirected to files, are also relative to the current working directory possibly set using the `cwd` argument.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Run Process` | prog.exe | cwd=${ROOT}/directory | stdout=stdout.txt |\n\n\n### Environment variables\n\nBy default the child process will get a copy of the parent process's environment variables. The `env` argument can be used to give the child a custom environment as a Python dictionary. If there is a need to specify only certain environment variable, it is possible to use the `env:\\<name>=\\<value>` format to set or override only that named variables. It is also possible to use these two approaches together.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Run Process` | program | env=${environ} |  |\n| `Run Process` | program | env:http_proxy=10.144.1.10:8080 | env:PATH=%{PATH}${:}${PROGDIR} |\n| `Run Process` | program | env=${environ} | env:EXTRA=value |\n\n\n### Standard output and error streams\n\nBy default processes are run so that their standard output and standard error streams are kept in the memory. This works fine normally, but if there is a lot of output, the output buffers may get full and the program can hang.\n\n\nTo avoid the above mentioned problems, it is possible to use `stdout` and `stderr` arguments to specify files on the file system where to redirect the outputs. This can also be useful if other processes or other keywords need to read or manipulate the outputs somehow.\n\n\nGiven `stdout` and `stderr` paths are relative to the `current working directory`. Forward slashes in the given paths are automatically converted to backslashes on Windows.\n\n\nAs a special feature, it is possible to redirect the standard error to the standard output by using `stderr=STDOUT`.\n\n\nRegardless are outputs redirected to files or not, they are accessible through the `result object` returned when the process ends. Commands are expected to write outputs using the console encoding, but `output encoding` can be configured using the `output_encoding` argument if needed.\n\n\nIf you are not interested in outputs at all, you can explicitly ignore them by using a special value `DEVNULL` both with `stdout` and `stderr`. For example, `stdout=DEVNULL` is the same as redirecting output on console with `> /dev/null` on UNIX-like operating systems or `> NUL` on Windows. This way the process will not hang even if there would be a lot of output, but naturally output is not available after execution either.\n\n\nSupport for the special value `DEVNULL` is new in Robot Framework 3.2.\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${result} = | `Run Process` | program | stdout=${TEMPDIR}/stdout.txt | stderr=${TEMPDIR}/stderr.txt |\n| `Log Many` | stdout: ${result.stdout} | stderr: ${result.stderr} |  |  |\n| ${result} = | `Run Process` | program | stderr=STDOUT |  |\n| `Log` | all output: ${result.stdout} |  |  |  |\n| ${result} = | `Run Process` | program | stdout=DEVNULL | stderr=DEVNULL |\n\n\nNote that the created output files are not automatically removed after the test run. The user is responsible to remove them if needed.\n\n\n### Standard input stream\n\nThe `stdin` argument makes it possible to pass information to the standard input stream of the started process. How its value is interpreted is explained in the table below.\n\n\n| Value | Explanation |\n| :--- | :--- |\n| String `PIPE` | Make stdin a pipe that can be written to. This is the default. |\n| String `NONE` | Inherit stdin from the parent process. This value is case-insensitive. |\n| Path to a file | Open the specified file and use it as the stdin. |\n| Any other string | Create a temporary file with the text as its content and use it as the stdin. |\n| Any non-string value | Used as-is. Could be a file descriptor, stdout of another process, etc. |\n\n\nValues `PIPE` and `NONE` are internally mapped directly to `subprocess.PIPE` and `None`, respectively, when calling [subprocess.Popen](https://docs.python.org/3/library/subprocess.html\\#subprocess.Popen). The default behavior may change from `PIPE` to `NONE` in future releases. If you depend on the `PIPE` behavior, it is a good idea to use it explicitly.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Run Process` | command | stdin=NONE |\n| `Run Process` | command | stdin=${CURDIR}/stdin.txt |\n| `Run Process` | command | stdin=Stdin as text. |\n\n\nThe support to configure `stdin` is new in Robot Framework 4.1.2.\n\n\n### Output encoding\n\nExecuted commands are, by default, expected to write outputs to the `standard output and error streams` using the encoding used by the system console. If the command uses some other encoding, that can be configured using the `output_encoding` argument. This is especially useful on Windows where the console uses a different encoding than rest of the system, and many commands use the general system encoding instead of the console encoding.\n\n\nThe value used with the `output_encoding` argument must be a valid encoding and must match the encoding actually used by the command. As a convenience, it is possible to use strings `CONSOLE` and `SYSTEM` to specify that the console or system encoding is used, respectively. If produced outputs use different encoding then configured, values got through the `result object` will be invalid.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Start Process` | program | output_encoding=UTF-8 |  |\n| `Run Process` | program | stdout=${path} | output_encoding=SYSTEM |\n\n\n### Alias\n\nA custom name given to the process that can be used when selecting the `active process`.\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Start Process` | program | alias=example |  |  |\n| `Run Process` | python | -c | print('hello') | alias=hello |\n\n\n## Active process\n\nThe library keeps record which of the started processes is currently active. By default it is the latest process started with `Start Process`, but `Switch Process` can be used to activate a different process. Using `Run Process` does not affect the active process.\n\n\nThe keywords that operate on started processes will use the active process by default, but it is possible to explicitly select a different process using the `handle` argument. The handle can be an `alias` explicitly given to `Start Process` or the process object returned by it.\n\n\n## Result object\n\n`Run Process`, `Wait For Process` and `Terminate Process` keywords return a result object that contains information about the process execution as its attributes. The same result object, or some of its attributes, can also be get using `Get Process Result` keyword. Attributes available in the object are documented in the table below.\n\n\n| Attribute | Explanation |\n| :--- | :--- |\n| rc | Return code of the process as an integer. |\n| stdout | Contents of the standard output stream. |\n| stderr | Contents of the standard error stream. |\n| stdout_path | Path where stdout was redirected or `None` if not redirected. |\n| stderr_path | Path where stderr was redirected or `None` if not redirected. |\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${result} = | `Run Process` | program |\n| `Should Be Equal As Integers` | ${result.rc} | 0 |\n| `Should Match` | ${result.stdout} | Some t?xt* |\n| `Should Be Empty` | ${result.stderr} |  |\n| ${stdout} = | `Get File` | ${result.stdout_path} |\n| `Should Be Equal` | ${stdout} | ${result.stdout} |\n| `File Should Be Empty` | ${result.stderr_path} |  |\n\n\n## Boolean arguments\n\nSome keywords accept arguments that are handled as Boolean values true or false. If such an argument is given as a string, it is considered false if it is an empty string or equal to `FALSE`, `NONE`, `NO`, `OFF` or `0`, case-insensitively. Other strings are considered true regardless their value, and other argument types are tested using the same [rules as in Python](http://docs.python.org/library/stdtypes.html\\#truth).\n\n\nTrue examples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Terminate Process` | kill=True | \\# Strings are generally true. |\n| `Terminate Process` | kill=yes | \\# Same as the above. |\n| `Terminate Process` | kill=${TRUE} | \\# Python `True` is true. |\n| `Terminate Process` | kill=${42} | \\# Numbers other than 0 are true. |\n\n\nFalse examples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Terminate Process` | kill=False | \\# String `false` is false. |\n| `Terminate Process` | kill=no | \\# Also string `no` is false. |\n| `Terminate Process` | kill=${EMPTY} | \\# Empty string is false. |\n| `Terminate Process` | kill=${FALSE} | \\# Python `False` is false. |\n\n\nConsidering `OFF` and `0` false is new in Robot Framework 3.1.\n\n\n## Example\n\n```text\n***** Settings *****\nLibrary           Process\nSuite Teardown    `Terminate All Processes`    kill=True\n\n***** Test Cases *****\nExample\n    `Start Process`    program    arg1    arg2    alias=First\n    ${handle} =    `Start Process`    command.sh arg | command2.sh    shell=True    cwd=/path\n    ${result} =    `Run Process`    ${CURDIR}/script.py\n    `Should Not Contain`    ${result.stdout}    FAIL\n    `Terminate Process`    ${handle}\n    ${result} =    `Wait For Process`    First\n    `Should Be Equal As Integers`    ${result.rc}    0\n```\n", "version": "5.0.1", "specversion": "4", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Python310\\lib\\site-packages\\robot\\libraries\\Process.py", "lineno": 30, "tags": [], "inits": [], "keywords": [{"name": "Get Process Id", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Returns the process ID (pid) of the process as an integer.\n\n\nIf `handle` is not given, uses the current `active process`.\n\n\nStarting from Robot Framework 5.0, it is also possible to directly access the `pid` attribute of the `subprocess.Popen` object returned by `Start Process` like `${process.pid}`.\n\n", "tags": [], "source": null, "shortdoc": "Returns the process ID (pid) of the process as an integer.", "lineno": 665}, {"name": "Get Process Object", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Return the underlying `subprocess.Popen` object.\n\n\nIf `handle` is not given, uses the current `active process`.\n\n\nStarting from Robot Framework 5.0, `Start Process` returns the created `subprocess.Popen` object, not a generic handle, making this keyword mostly redundant.\n\n", "tags": [], "source": null, "shortdoc": "Return the underlying `subprocess.Popen` object.", "lineno": 676}, {"name": "Get Process Result", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "rc", "kind": "POSITIONAL_OR_NAMED", "repr": "rc=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}, {"name": "stdout", "kind": "POSITIONAL_OR_NAMED", "repr": "stdout=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}, {"name": "stderr", "kind": "POSITIONAL_OR_NAMED", "repr": "stderr=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}, {"name": "stdout_path", "kind": "POSITIONAL_OR_NAMED", "repr": "stdout_path=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}, {"name": "stderr_path", "kind": "POSITIONAL_OR_NAMED", "repr": "stderr_path=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Returns the specified `result object` or some of its attributes.\n\n\nThe given `handle` specifies the process whose results should be returned. If no `handle` is given, results of the current `active process` are returned. In either case, the process must have been finishes before this keyword can be used. In practice this means that processes started with `Start Process` must be finished either with `Wait For Process` or `Terminate Process` before using this keyword.\n\n\nIf no other arguments than the optional `handle` are given, a whole `result object` is returned. If one or more of the other arguments are given any true value, only the specified attributes of the `result object` are returned. These attributes are always returned in the same order as arguments are specified in the keyword signature. See `Boolean arguments` section for more details about true and false values.\n\n\nExamples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| Run Process | python | -c | print('Hello, world!') | alias=myproc |  |\n| \\# Get result object |  |  |  |  |  |\n| ${result} = | Get Process Result | myproc |  |  |  |\n| Should Be Equal | ${result.rc} | ${0} |  |  |  |\n| Should Be Equal | ${result.stdout} | Hello, world! |  |  |  |\n| Should Be Empty | ${result.stderr} |  |  |  |  |\n| \\# Get one attribute |  |  |  |  |  |\n| ${stdout} = | Get Process Result | myproc | stdout=true |  |  |\n| Should Be Equal | ${stdout} | Hello, world! |  |  |  |\n| \\# Multiple attributes |  |  |  |  |  |\n| ${stdout} | ${stderr} = | Get Process Result | myproc | stdout=yes | stderr=yes |\n| Should Be Equal | ${stdout} | Hello, world! |  |  |  |\n| Should Be Empty | ${stderr} |  |  |  |  |\n\n\nAlthough getting results of a previously executed process can be handy in general, the main use case for this keyword is returning results over the remote library interface. The remote interface does not support returning the whole result object, but individual attributes can be returned without problems.\n\n", "tags": [], "source": null, "shortdoc": "Returns the specified `result object` or some of its attributes.", "lineno": 687}, {"name": "Is Process Running", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Checks is the process running or not.\n\n\nIf `handle` is not given, uses the current `active process`.\n\n\nReturns `True` if the process is still running and `False` otherwise.\n\n", "tags": [], "source": null, "shortdoc": "Checks is the process running or not.", "lineno": 419}, {"name": "Join Command Line", "args": [{"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Joins arguments into one command line string.\n\n\nIn resulting command line string arguments are delimited with a space, arguments containing spaces are surrounded with quotes, and possible quotes are escaped with a backslash.\n\n\nIf this keyword is given only one argument and that is a list like object, then the values of that list are joined instead.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${cmd} = | Join Command Line | --option | value with spaces |\n| Should Be Equal | ${cmd} | --option \"value with spaces\" |  |\n\n", "tags": [], "source": null, "shortdoc": "Joins arguments into one command line string.", "lineno": 783}, {"name": "Process Should Be Running", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "error_message", "kind": "POSITIONAL_OR_NAMED", "repr": "error_message=Process is not running.", "required": true, "defaultValue": "Process is not running.", "types": [], "typedocs": []}], "doc": "Verifies that the process is running.\n\n\nIf `handle` is not given, uses the current `active process`.\n\n\nFails if the process has stopped.\n\n", "tags": [], "source": null, "shortdoc": "Verifies that the process is running.", "lineno": 428}, {"name": "Process Should Be Stopped", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "error_message", "kind": "POSITIONAL_OR_NAMED", "repr": "error_message=Process is running.", "required": true, "defaultValue": "Process is running.", "types": [], "typedocs": []}], "doc": "Verifies that the process is not running.\n\n\nIf `handle` is not given, uses the current `active process`.\n\n\nFails if the process is still running.\n\n", "tags": [], "source": null, "shortdoc": "Verifies that the process is not running.", "lineno": 439}, {"name": "Run Process", "args": [{"name": "command", "kind": "POSITIONAL_OR_NAMED", "repr": "command", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@arguments", "kind": "VAR_POSITIONAL", "repr": "*arguments", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "&configuration", "kind": "VAR_NAMED", "repr": "**configuration", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Runs a process and waits for it to complete.\n\n\n`command` and `*arguments` specify the command to execute and arguments passed to it. See `Specifying command and arguments` for more details.\n\n\n`**configuration` contains additional configuration related to starting processes and waiting for them to finish. See `Process configuration` for more details about configuration related to starting processes. Configuration related to waiting for processes consists of `timeout` and `on_timeout` arguments that have same semantics as with `Wait For Process` keyword. By default there is no timeout, and if timeout is defined the default action on timeout is `terminate`.\n\n\nReturns a `result object` containing information about the execution.\n\n\nNote that possible equal signs in `*arguments` must be escaped with a backslash (e.g. `name\\=value`) to avoid them to be passed in as `**configuration`.\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${result} = | Run Process | python | -c | print('Hello, world!') |\n| Should Be Equal | ${result.stdout} | Hello, world! |  |  |\n| ${result} = | Run Process | ${command} | stderr=STDOUT | timeout=10s |\n| ${result} = | Run Process | ${command} | timeout=1min | on_timeout=continue |\n| ${result} = | Run Process | java -Dname\\=value Example | shell=True | cwd=${EXAMPLE} |\n\n\nThis keyword does not change the `active process`.\n\n", "tags": [], "source": null, "shortdoc": "Runs a process and waits for it to complete.", "lineno": 328}, {"name": "Send Signal To Process", "args": [{"name": "signal", "kind": "POSITIONAL_OR_NAMED", "repr": "signal", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "group", "kind": "POSITIONAL_OR_NAMED", "repr": "group=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Sends the given `signal` to the specified process.\n\n\nIf `handle` is not given, uses the current `active process`.\n\n\nSignal can be specified either as an integer as a signal name. In the latter case it is possible to give the name both with or without `SIG` prefix, but names are case-sensitive. For example, all the examples below send signal `INT (2)`:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Send Signal To Process | 2 |  | \\# Send to active process |\n| Send Signal To Process | INT |  |  |\n| Send Signal To Process | SIGINT | myproc | \\# Send to named process |\n\n\nThis keyword is only supported on Unix-like machines, not on Windows. What signals are supported depends on the system. For a list of existing signals on your system, see the Unix man pages related to signal handling (typically `man signal` or `man 7 signal`).\n\n\nBy default sends the signal only to the parent process, not to possible child processes started by it. Notice that when `running processes in shell`, the shell is the parent process and it depends on the system does the shell propagate the signal to the actual started process.\n\n\nTo send the signal to the whole process group, `group` argument can be set to any true value (see `Boolean arguments`).\n\n", "tags": [], "source": null, "shortdoc": "Sends the given `signal` to the specified process.", "lineno": 612}, {"name": "Split Command Line", "args": [{"name": "args", "kind": "POSITIONAL_OR_NAMED", "repr": "args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "escaping", "kind": "POSITIONAL_OR_NAMED", "repr": "escaping=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Splits command line string into a list of arguments.\n\n\nString is split from spaces, but argument surrounded in quotes may contain spaces in them. If `escaping` is given a true value, then backslash is treated as an escape character. It can escape unquoted spaces, quotes inside quotes, and so on, but it also requires using double backslashes when using Windows paths.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| @{cmd} = | Split Command Line | --option \"value with spaces\" |\n| Should Be True | $cmd == ['--option', 'value with spaces'] |  |\n\n", "tags": [], "source": null, "shortdoc": "Splits command line string into a list of arguments.", "lineno": 768}, {"name": "Start Process", "args": [{"name": "command", "kind": "POSITIONAL_OR_NAMED", "repr": "command", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@arguments", "kind": "VAR_POSITIONAL", "repr": "*arguments", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "&configuration", "kind": "VAR_NAMED", "repr": "**configuration", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Starts a new process on background.\n\n\nSee `Specifying command and arguments` and `Process configuration` for more information about the arguments, and `Run Process` keyword for related examples.\n\n\nMakes the started process new `active process`. Returns the created [subprocess.Popen](https://docs.python.org/3/library/subprocess.html\\#popen-constructor) object which can be be used later to active this process. `Popen` attributes like `pid` can also be accessed directly.\n\n\nProcesses are started so that they create a new process group. This allows terminating and sending signals to possible child processes.\n\n\nExamples:\n\n\nStart process and wait for it to end later using alias:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Start Process` | ${command} | alias=example |\n| \\# Other keywords |  |  |\n| ${result} = | `Wait For Process` | example |\n\n\nUse returned `Popen` object:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${process} = | `Start Process` | ${command} |\n| `Log` | PID: ${process.pid} |  |\n| \\# Other keywords |  |  |\n| ${result} = | `Terminate Process` | ${process} |\n\n\nUse started process in a pipeline with another process:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${process} = | `Start Process` | python | -c | print('Hello, world!') |  |\n| ${result} = | `Run Process` | python | -c | import sys; print(sys.stdin.read().upper().strip()) | stdin=${process.stdout} |\n| `Wait For Process` | ${process} |  |  |  |  |\n| `Should Be Equal` | ${result.stdout} | HELLO, WORLD! |  |  |  |\n\n\nReturning a `subprocess.Popen` object is new in Robot Framework 5.0. Earlier versions returned a generic handle and getting the process object required using `Get Process Object` separately.\n\n", "tags": [], "source": null, "shortdoc": "Starts a new process on background.", "lineno": 367}, {"name": "Switch Process", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Makes the specified process the current `active process`.\n\n\nThe handle can be an identifier returned by `Start Process` or the `alias` given to it explicitly.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Start Process | prog1 | alias=process1 |\n| Start Process | prog2 | alias=process2 |\n| \\# currently active process is process2 |  |  |\n| Switch Process | process1 |  |\n| \\# now active process is process1 |  |  |\n\n", "tags": [], "source": null, "shortdoc": "Makes the specified process the current `active process`.", "lineno": 746}, {"name": "Terminate All Processes", "args": [{"name": "kill", "kind": "POSITIONAL_OR_NAMED", "repr": "kill=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Terminates all still running processes started by this library.\n\n\nThis keyword can be used in suite teardown or elsewhere to make sure that all processes are stopped,\n\n\nBy default tries to terminate processes gracefully, but can be configured to forcefully kill them immediately. See `Terminate Process` that this keyword uses internally for more details.\n\n", "tags": [], "source": null, "shortdoc": "Terminates all still running processes started by this library.", "lineno": 597}, {"name": "Terminate Process", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "kill", "kind": "POSITIONAL_OR_NAMED", "repr": "kill=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Stops the process gracefully or forcefully.\n\n\nIf `handle` is not given, uses the current `active process`.\n\n\nBy default first tries to stop the process gracefully. If the process does not stop in 30 seconds, or `kill` argument is given a true value, (see `Boolean arguments`) kills the process forcefully. Stops also all the child processes of the originally started process.\n\n\nWaits for the process to stop after terminating it. Returns a `result object` containing information about the execution similarly as `Wait For Process`.\n\n\nOn Unix-like machines graceful termination is done using `TERM (15)` signal and killing using `KILL (9)`. Use `Send Signal To Process` instead if you just want to send either of these signals without waiting for the process to stop.\n\n\nOn Windows graceful termination is done using `CTRL_BREAK_EVENT` event and killing using Win32 API function `TerminateProcess()`.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${result} = | Terminate Process |  |  |\n| Should Be Equal As Integers | ${result.rc} | -15 | \\# On Unixes |\n| Terminate Process | myproc | kill=true |  |\n\n\nLimitations:\n\n\n- On Windows forceful kill only stops the main process, not possible child processes.\n\n", "tags": [], "source": null, "shortdoc": "Stops the process gracefully or forcefully.", "lineno": 530}, {"name": "Wait For Process", "args": [{"name": "handle", "kind": "POSITIONAL_OR_NAMED", "repr": "handle=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "on_timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "on_timeout=continue", "required": true, "defaultValue": "continue", "types": [], "typedocs": []}], "doc": "Waits for the process to complete or to reach the given timeout.\n\n\nThe process to wait for must have been started earlier with `Start Process`. If `handle` is not given, uses the current `active process`.\n\n\n`timeout` defines the maximum time to wait for the process. It can be given in [various time formats](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#time-format) supported by Robot Framework, for example, `42`, `42 s`, or `1 minute 30 seconds`. The timeout is ignored if it is Python `None` (default), string `NONE` (case-insensitively), zero, or negative.\n\n\n`on_timeout` defines what to do if the timeout occurs. Possible values and corresponding actions are explained in the table below. Notice that reaching the timeout never fails the test.\n\n\n| Value | Action |\n| :--- | :--- |\n| continue | The process is left running (default). |\n| terminate | The process is gracefully terminated. |\n| kill | The process is forcefully stopped. |\n\n\nSee `Terminate Process` keyword for more details how processes are terminated and killed.\n\n\nIf the process ends before the timeout or it is terminated or killed, this keyword returns a `result object` containing information about the execution. If the process is left running, Python `None` is returned instead.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| \\# Process ends cleanly |  |  |  |\n| ${result} = | Wait For Process | example |  |\n| Process Should Be Stopped | example |  |  |\n| Should Be Equal As Integers | ${result.rc} | 0 |  |\n| \\# Process does not end |  |  |  |\n| ${result} = | Wait For Process | timeout=42 secs |  |\n| Process Should Be Running |  |  |  |\n| Should Be Equal | ${result} | ${NONE} |  |\n| \\# Kill non-ending process |  |  |  |\n| ${result} = | Wait For Process | timeout=1min 30s | on_timeout=kill |\n| Process Should Be Stopped |  |  |  |\n| Should Be Equal As Integers | ${result.rc} | -9 |  |\n\n\nIgnoring timeout if it is string `NONE`, zero, or negative is new in Robot Framework 3.2.\n\n", "tags": [], "source": null, "shortdoc": "Waits for the process to complete or to reach the given timeout.", "lineno": 450}], "dataTypes": {}, "typedocs": []}